{
  "_args": [
    [
      {
        "raw": "mongoose-validator@*",
        "scope": null,
        "escapedName": "mongoose-validator",
        "name": "mongoose-validator",
        "rawSpec": "*",
        "spec": "*",
        "type": "range"
      },
      "G:\\Office\\Project\\broker\\brokerportal"
    ]
  ],
  "_from": "mongoose-validator@*",
  "_id": "mongoose-validator@1.3.2",
  "_inCache": true,
  "_location": "/mongoose-validator",
  "_nodeVersion": "7.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/mongoose-validator-1.3.2.tgz_1497247621876_0.3977805587928742"
  },
  "_npmUser": {
    "name": "leepowellcouk",
    "email": "lee@leepowell.co.uk"
  },
  "_npmVersion": "5.0.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mongoose-validator@*",
    "scope": null,
    "escapedName": "mongoose-validator",
    "name": "mongoose-validator",
    "rawSpec": "*",
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/mongoose-validator/-/mongoose-validator-1.3.2.tgz",
  "_shasum": "49f39c345432c2ed5828104d56bce029887b6682",
  "_shrinkwrap": null,
  "_spec": "mongoose-validator@*",
  "_where": "G:\\Office\\Project\\broker\\brokerportal",
  "author": {
    "name": "Lee Powell",
    "email": "lee@leepowell.co.uk",
    "url": "https://leepowell.co.uk"
  },
  "bugs": {
    "url": "https://github.com/leepowellcouk/mongoose-validator/issues"
  },
  "contributors": [
    {
      "name": "Francesco Pasqua",
      "url": "https://github.com/cesconix/"
    },
    {
      "name": "Igor Escobar",
      "url": "https://github.com/igorescobar/"
    },
    {
      "name": "Todd Bluhm",
      "url": "https://github.com/toddbluhm/"
    },
    {
      "name": "Subash Pathak",
      "url": "https://github.com/subash/"
    },
    {
      "name": "Kristijan Sedlak",
      "url": "https://github.com/xpepermint"
    },
    {
      "name": "Eric Saboia",
      "url": "https://github.com/ericsaboia"
    },
    {
      "name": "Rob Rodriguez",
      "url": "https://github.com/rodriguise"
    }
  ],
  "dependencies": {
    "is": "^3.2.1",
    "validator": "^7.0.0"
  },
  "description": "Validators for mongoose models utilising validator.js",
  "devDependencies": {
    "jsdoc": "^3.4.3",
    "mocha": "^3.4.1",
    "mongoose": "^4.10.0",
    "should": "^11.2.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-HmN1YHcO7PM/veEyAUFx0LbOMDwrocXrFkQIoJBUrKzW8BbRb2jVqnRaDnQGyCXddKHfielYcL3H9LMf5OfugA==",
    "shasum": "49f39c345432c2ed5828104d56bce029887b6682",
    "tarball": "https://registry.npmjs.org/mongoose-validator/-/mongoose-validator-1.3.2.tgz"
  },
  "engines": {
    "node": "*"
  },
  "gitHead": "c629e5890a8373fef24c1bb81a2175e4f1c7ad6c",
  "homepage": "https://github.com/leepowellcouk/mongoose-validator#readme",
  "keywords": [
    "mongoose",
    "validate",
    "validation",
    "models",
    "schema"
  ],
  "license": "MIT",
  "main": "./lib/mongoose-validator",
  "maintainers": [
    {
      "name": "leepowellcouk",
      "email": "lee@leepowell.co.uk"
    }
  ],
  "name": "mongoose-validator",
  "optionalDependencies": {},
  "readme": "# Mongoose Validator\n\n[![Build Status](https://travis-ci.org/leepowellcouk/mongoose-validator.svg?branch=master)](https://travis-ci.org/leepowellcouk/mongoose-validator)\n\nValidators for [Mongoose](http://mongoosejs.com) schemas utilising [validator.js](https://github.com/chriso/validator.js).\n\nMongoose Validator simply returns Mongoose style validation objects that utilises validator.js for the data validation.\n\nVersion 1.0.x has been refactored to support a simpler interface and also validator.js 3.0.x\n\n**NOTE**: If you were using 0.2.x with your projects please be aware that upgrading to 1.0.x will break them. As of validator.js 3.0.x - many of the avilable validators have been changed. For example, 'regex' validator no longer exists and has been replaced with 'matches'.\n\n## Installation\n\n```bash\n$ npm i mongoose-validator -S\n```\n\n### Legacy install\n\nIf you need to install the 0.2.2 release, use the following command:\n\n```bash\n$ npm i mongoose-validator@0.2.2 -S\n```\n\nMore details on 0.2.2 can be found [here](https://github.com/leepowellcouk/mongoose-validator/blob/0.2.2/README.md)\n\n## Usage\n\n```javascript\nvar mongoose = require('mongoose');\nvar validate = require('mongoose-validator');\n\nvar nameValidator = [\n  validate({\n    validator: 'isLength',\n    arguments: [3, 50],\n    message: 'Name should be between {ARGS[0]} and {ARGS[1]} characters'\n  }),\n  validate({\n    validator: 'isAlphanumeric',\n    passIfEmpty: true,\n    message: 'Name should contain alpha-numeric characters only'\n  })\n];\n\nvar Schema = new mongoose.Schema({\n  name: {type: String, required: true, validate: nameValidator}\n});\n```\n\nError objects are returned as normal via Mongoose.\n\n## Options\n\n### option.validator {string} or {function} - required\nName of the validator or a custom function you wish to use, this can be any one of the [built-in validator.js validators](https://github.com/chriso/validator.js/#validators), or a [custom validator](#custom-validators).\n\n### option.arguments - optional\nArguments to be passed to the validator. These can either be an array of arguments (for validators that can accept more than one i.e. `isLength`), or a single argument as any type.\n\n### option.passIfEmpty {boolean} - optional - default: false\nSome of the validator.js validators require a value to check against (isEmail, isUrl etc). There may be instances where you don't have a value to check i.e. a path that is not required and as such these few validators return an false value causing validation to fail. This can now be bypassed by setting the `passIfEmpty` option.\n\n### option.message - optional\nSet the error message to be used should the validator fail. If no error message is set then mongoose-validator will attempt to use one of the built-in default messages, if it can't then a simple message of 'Error' will be returned. Enhanced message templating is supported by giving the ability to use the validator arguments. You can use these like `{ARGS[argument index position]}`. Note: Use `{ARGS[0]}` if your arguments isn't an array.\n\n```javascript\nvalidate({\n  validator: 'isLength',\n  arguments: [3, 50],\n  message: 'Name should be between {ARGS[0]} and {ARGS[1]} characters'\n}),\n\n// On error produces: Name should be between 3 and 50 characters\n```\nThe built in Mongoose message template variables still work as expected. You can find out more about those here: [http://mongoosejs.com/docs/api.html#error_messages_MongooseError-messages](http://mongoosejs.com/docs/api.html#error_messages_MongooseError-messages)\n\n### option.type - optional\nSet the type of validator type. If this is not defined, Mongoose will set this for you. Read more about this here: [http://mongoosejs.com/docs/api.html#schematype_SchemaType-validate](http://mongoosejs.com/docs/api.html#schematype_SchemaType-validate)\n\n### Extending the error properties (mongoose version >= 3.9.7)\n\nAny additional members added to the options object will be available in the 'err.properties' field of the mongoose validation error.\n\n```javascript\nvar alphaValidator = validate({\n    validator: 'isAlphanumeric',\n    passIfEmpty: true,\n    message: 'Name should contain alpha-numeric characters only',\n    httpStatus: 400\n  });\n```\nIn this example the error object returned by mongoose will have its 'properties' extended with httpStatus should validation fail. More details can be found about this here: [http://thecodebarbarian.com/2014/12/19/mongoose-397](http://thecodebarbarian.com/2014/12/19/mongoose-397)\n\n## Async validators\n\nBy default Mongoose runs all validators synchronously, if you need to perform asynchronous validation you can do so by returning a [Promise](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise) from your validator.\n\n```javascript\nvalidate({\n  validator: function(val) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve(val > 0)\n      }, 500)\n    });\n  },\n  message: 'Count must be a positive number.'\n})\n```\n\n## Custom validators\n\nCustom validators can also be added - these are then added to the validator.js object.\n**NOTE**: Validator.js converts all values to strings internally for built-in validators - however custom validators do *not* do this. This allows you to create custom validators for checking all types such as arrays and objects.\n\n```javascript\n// extend([method name], [validator], [default error message])\n\nvar extend = require('mongoose-validator').extend;\n\nextend('isString', function (val) {\n  return Object.prototype.toString.call(val) === '[object String]';\n}, 'Not a string');\n```\n\nCustom validators are called normally:\n\n```javascript\nvalidate({\n  validator: 'isString'\n});\n```\n\nCustom validator can be passed directly as a function:\n\n```javascript\nvalidate({\n  validator: function(val) {\n    return val > 0;\n  },\n  message: 'Count must be a positive number.'\n})\n```\n\nNOTE: As per validator.js documentation, the currently tested value is accessed through the first argument that is automatically passed to the validator function.\n\n## Regular Expressions\n\nMongoose Validator can use the validator.js `matches` method, however, it's worth noting that the regex can be passed in 2 ways - as per the validator.js documentation, firstly they can be passed as a literal:\n\n```javascript\nvalidate({\n  validator: 'matches',\n  arguments: /^[a-zA-Z\\-]+$/i\n});\n```\n\nor as a string with a further argument containing any required modifiers:\n\n```javascript\nvalidate({\n  validator: 'matches',\n  arguments: ['^[a-zA-Z\\-]+$', 'i']\n});\n```\n\n## Contributors\n\nSpecial thanks to [Francesco Pasqua](https://github.com/cesconix/) for heavily refactoring the code into something far more future proof. Thanks also go to [Igor Escobar](https://github.com/igorescobar/) and [Todd Bluhm](https://github.com/toddbluhm/) for their contributions.\n\n## License (MIT)\n\nCopyright (c) 2015 Lee Powell <lee@leepowell.co.uk>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/leepowellcouk/mongoose-validator.git"
  },
  "scripts": {
    "docs": "jsdoc lib/mongoose-validator.js -d ./docs/",
    "postversion": "git push && git push --tags",
    "preversion": "npm test",
    "test": "mocha -R list"
  },
  "version": "1.3.2"
}
